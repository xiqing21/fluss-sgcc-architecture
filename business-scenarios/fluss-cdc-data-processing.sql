-- ===============================================
-- üîã Fluss CDCÊï∞ÊçÆÂ§ÑÁêÜ - ‰∏∫Â§ßÂ±èÁîüÊàêÊ±áÊÄªÊï∞ÊçÆ
-- Ë°•ÂÖÖÁî®Êà∑ÁöÑÁªºÂêà‰∏öÂä°Âú∫ÊôØÊµãËØï.sqlÔºåÁîüÊàêDashboardÊâÄÈúÄÁöÑÊ±áÊÄªË°®
-- Êï∞ÊçÆÊµÅÔºöPostgreSQLÊ∫ê ‚Üí CDC ‚Üí Fluss ‚Üí Êú¨ËÑöÊú¨Â§ÑÁêÜ ‚Üí PostgreSQL sink
-- ===============================================

SET 'sql-client.execution.result-mode' = 'tableau';

-- ÂàõÂª∫Fluss CatalogËøûÊé•
CREATE CATALOG IF NOT EXISTS fluss_catalog WITH (
    'type' = 'fluss',
    'bootstrap.servers' = 'coordinator-server-sgcc:9123'
);

USE CATALOG fluss_catalog;
USE fluss;

-- ÂõûÂà∞default catalogÂàõÂª∫PostgreSQL sinkË°®
USE CATALOG default_catalog;

-- ÂàõÂª∫ËÆæÂ§áÁä∂ÊÄÅÊ±áÊÄªË°®ÁöÑsinkËøûÊé•
CREATE TABLE IF NOT EXISTS postgres_device_status_summary (
    summary_id STRING,
    device_id STRING,
    device_type STRING,
    location STRING,
    status STRING,
    load_factor DOUBLE,
    efficiency DOUBLE,
    temperature DOUBLE,
    update_time TIMESTAMP(3),
    PRIMARY KEY (summary_id) NOT ENFORCED
) WITH (
    'connector' = 'jdbc',
    'url' = 'jdbc:postgresql://postgres-sgcc-sink:5432/sgcc_dw_db',
    'table-name' = 'device_status_summary',
    'username' = 'sgcc_user',
    'password' = 'sgcc_pass_2024'
);

-- ÂàõÂª∫ÁîµÁΩëÁõëÊéßÊåáÊ†áË°®ÁöÑsinkËøûÊé•
CREATE TABLE IF NOT EXISTS postgres_grid_monitoring_metrics (
    metric_id STRING,
    grid_region STRING,
    total_devices INTEGER,
    online_devices INTEGER,
    offline_devices INTEGER,
    maintenance_devices INTEGER,
    avg_efficiency DOUBLE,
    avg_load_factor DOUBLE,
    avg_temperature DOUBLE,
    alert_count INTEGER,
    update_time TIMESTAMP(3),
    PRIMARY KEY (metric_id) NOT ENFORCED
) WITH (
    'connector' = 'jdbc',
    'url' = 'jdbc:postgresql://postgres-sgcc-sink:5432/sgcc_dw_db',
    'table-name' = 'grid_monitoring_metrics',
    'username' = 'sgcc_user',
    'password' = 'sgcc_pass_2024'
);

-- ===============================================
-- ‰ªéFluss DWDÂ±ÇÁîüÊàêËÆæÂ§áÁä∂ÊÄÅÊ±áÊÄªÊï∞ÊçÆ
-- ===============================================

-- üöÄ ÁîüÊàêËÆæÂ§áÁä∂ÊÄÅÊ±áÊÄªÊï∞ÊçÆ - Áî®‰∫éÂ§ßÂ±èÂÆûÊó∂ËÆæÂ§áÁõëÊéßË°®
INSERT INTO postgres_device_status_summary
SELECT 
    CONCAT('DEVICE_SUMMARY_', device_id, '_', CAST(DATE_FORMAT(dispatch_time, 'yyyyMMddHHmmss') AS STRING)) as summary_id,
    device_id,
    device_type,
    device_location as location,
    CASE 
        WHEN operational_status = 'OPTIMAL' THEN 'NORMAL'
        WHEN operational_status = 'GOOD' THEN 'NORMAL'
        WHEN operational_status = 'ACCEPTABLE' THEN 'WARNING'
        WHEN operational_status = 'NEEDS_ATTENTION' THEN 'CRITICAL'
        WHEN risk_level = 'HIGH_RISK' THEN 'CRITICAL'
        WHEN risk_level = 'MEDIUM_RISK' THEN 'WARNING'
        ELSE 'MAINTENANCE'
    END as status,
    supply_demand_balance as load_factor,
    device_health_score as efficiency,
    -- Ê®°ÊãüÊ∏©Â∫¶Êï∞ÊçÆÔºà‰ªéËÆæÂ§áÂÅ•Â∫∑ËØÑÂàÜÊé®ÁÆóÔºâ
    CASE 
        WHEN device_health_score > 90 THEN 25.0 + (100 - device_health_score) * 2
        WHEN device_health_score > 80 THEN 35.0 + (90 - device_health_score) * 3
        WHEN device_health_score > 70 THEN 45.0 + (80 - device_health_score) * 4
        ELSE 65.0 + (70 - device_health_score) * 2
    END as temperature,
    dispatch_time as update_time
FROM fluss_catalog.fluss.dwd_smart_grid_detail
WHERE dispatch_time >= CURRENT_TIMESTAMP - INTERVAL '1' HOUR;

-- ===============================================
-- ‰ªéFluss DWSÂ±ÇÁîüÊàêÁîµÁΩëÁõëÊéßÊåáÊ†áÊï∞ÊçÆ
-- ===============================================

-- üöÄ ÁîüÊàêÁîµÁΩëÁõëÊéßÊåáÊ†áÊï∞ÊçÆ - Áî®‰∫éÂ§ßÂ±èÁªüËÆ°ÊåáÊ†á
INSERT INTO postgres_grid_monitoring_metrics
SELECT 
    CONCAT('GRID_METRICS_', grid_region, '_', time_window) as metric_id,
    grid_region,
    total_devices as total_devices,
    CAST(total_devices * frequency_stability_rate / 100 AS INTEGER) as online_devices,
    CAST(total_devices * (100 - frequency_stability_rate) / 100 AS INTEGER) as offline_devices,
    high_risk_incidents as maintenance_devices,
    avg_device_health as avg_efficiency,
    avg_supply_demand_balance as avg_load_factor,
    -- Ê®°ÊãüÂπ≥ÂùáÊ∏©Â∫¶Ôºà‰ªéËÆæÂ§áÂÅ•Â∫∑ËØÑÂàÜÊé®ÁÆóÔºâ
    CASE 
        WHEN avg_device_health > 90 THEN 30.0
        WHEN avg_device_health > 80 THEN 40.0
        WHEN avg_device_health > 70 THEN 50.0
        ELSE 60.0
    END as avg_temperature,
    emergency_responses as alert_count,
    CURRENT_TIMESTAMP as update_time
FROM fluss_catalog.fluss.dws_grid_operation_summary
WHERE time_window >= DATE_FORMAT(CURRENT_TIMESTAMP - INTERVAL '2' HOUR, 'yyyyMMddHH');

-- ===============================================
-- ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Âà∑Êñ∞Ê±áÊÄªÊï∞ÊçÆ
-- ===============================================

-- ÊØèÂàÜÈíüÂà∑Êñ∞ËÆæÂ§áÁä∂ÊÄÅÊ±áÊÄª
CREATE TEMPORARY VIEW refresh_device_status AS
SELECT 
    CONCAT('DEVICE_SUMMARY_', device_id, '_', CAST(DATE_FORMAT(dispatch_time, 'yyyyMMddHHmmss') AS STRING)) as summary_id,
    device_id,
    device_type,
    device_location as location,
    CASE 
        WHEN operational_status = 'OPTIMAL' THEN 'NORMAL'
        WHEN operational_status = 'GOOD' THEN 'NORMAL'
        WHEN operational_status = 'ACCEPTABLE' THEN 'WARNING'
        WHEN operational_status = 'NEEDS_ATTENTION' THEN 'CRITICAL'
        WHEN risk_level = 'HIGH_RISK' THEN 'CRITICAL'
        WHEN risk_level = 'MEDIUM_RISK' THEN 'WARNING'
        ELSE 'MAINTENANCE'
    END as status,
    supply_demand_balance as load_factor,
    device_health_score as efficiency,
    CASE 
        WHEN device_health_score > 90 THEN 25.0 + (100 - device_health_score) * 2
        WHEN device_health_score > 80 THEN 35.0 + (90 - device_health_score) * 3
        WHEN device_health_score > 70 THEN 45.0 + (80 - device_health_score) * 4
        ELSE 65.0 + (70 - device_health_score) * 2
    END as temperature,
    dispatch_time as update_time
FROM fluss_catalog.fluss.dwd_smart_grid_detail
WHERE dispatch_time >= CURRENT_TIMESTAMP - INTERVAL '30' MINUTE;

-- ÊØè5ÂàÜÈíüÂà∑Êñ∞ÁîµÁΩëÁõëÊéßÊåáÊ†á
CREATE TEMPORARY VIEW refresh_grid_metrics AS
SELECT 
    CONCAT('GRID_METRICS_', grid_region, '_', time_window) as metric_id,
    grid_region,
    total_devices as total_devices,
    CAST(total_devices * frequency_stability_rate / 100 AS INTEGER) as online_devices,
    CAST(total_devices * (100 - frequency_stability_rate) / 100 AS INTEGER) as offline_devices,
    high_risk_incidents as maintenance_devices,
    avg_device_health as avg_efficiency,
    avg_supply_demand_balance as avg_load_factor,
    CASE 
        WHEN avg_device_health > 90 THEN 30.0
        WHEN avg_device_health > 80 THEN 40.0
        WHEN avg_device_health > 70 THEN 50.0
        ELSE 60.0
    END as avg_temperature,
    emergency_responses as alert_count,
    CURRENT_TIMESTAMP as update_time
FROM fluss_catalog.fluss.dws_grid_operation_summary
WHERE time_window >= DATE_FORMAT(CURRENT_TIMESTAMP - INTERVAL '1' HOUR, 'yyyyMMddHH');

-- ===============================================
-- Êï∞ÊçÆË¥®ÈáèÁõëÊéßÊü•ËØ¢
-- ===============================================

-- Êü•ÁúãÊï∞ÊçÆÊµÅÁä∂ÊÄÅ
SELECT 
    'PostgreSQLÊ∫ê->Fluss CDCÊï∞ÊçÆÊµÅ' as data_flow,
    'ODSÁîµÂäõË∞ÉÂ∫¶' as layer,
    COUNT(*) as record_count
FROM fluss_catalog.fluss.ods_power_dispatch_raw
WHERE event_time >= CURRENT_TIMESTAMP - INTERVAL '10' MINUTE
UNION ALL
SELECT 
    'PostgreSQLÊ∫ê->Fluss CDCÊï∞ÊçÆÊµÅ' as data_flow,
    'ODSËÆæÂ§áÁª¥Â∫¶' as layer,
    COUNT(*) as record_count
FROM fluss_catalog.fluss.ods_device_dimension_raw
WHERE event_time >= CURRENT_TIMESTAMP - INTERVAL '10' MINUTE
UNION ALL
SELECT 
    'FlussÊï∞‰ªìÂàÜÂ±ÇÂ§ÑÁêÜ' as data_flow,
    'DWDÊô∫ËÉΩÁîµÁΩëÊòéÁªÜ' as layer,
    COUNT(*) as record_count
FROM fluss_catalog.fluss.dwd_smart_grid_detail
WHERE dispatch_time >= CURRENT_TIMESTAMP - INTERVAL '10' MINUTE
UNION ALL
SELECT 
    'FlussÊï∞‰ªìÂàÜÂ±ÇÂ§ÑÁêÜ' as data_flow,
    'DWSÁîµÁΩëËøêË°åÊ±áÊÄª' as layer,
    COUNT(*) as record_count
FROM fluss_catalog.fluss.dws_grid_operation_summary
WHERE time_window >= DATE_FORMAT(CURRENT_TIMESTAMP - INTERVAL '1' HOUR, 'yyyyMMddHH')
UNION ALL
SELECT 
    'FlussÊï∞‰ªìÂàÜÂ±ÇÂ§ÑÁêÜ' as data_flow,
    'ADSÁªºÂêàÂàÜÊûêÊä•Ë°®' as layer,
    COUNT(*) as record_count
FROM fluss_catalog.fluss.ads_smart_grid_comprehensive_report
WHERE report_time >= CURRENT_TIMESTAMP - INTERVAL '1' HOUR;

-- Êü•ÁúãPostgreSQL sinkÊï∞ÊçÆÁä∂ÊÄÅ
SELECT 
    'Fluss->PostgreSQL sinkÊï∞ÊçÆÊµÅ' as data_flow,
    'SinkÁªºÂêàÂàÜÊûêÁªìÊûú' as layer,
    COUNT(*) as record_count
FROM postgres_smart_grid_comprehensive_result
WHERE report_time >= CURRENT_TIMESTAMP - INTERVAL '1' HOUR
UNION ALL
SELECT 
    'Fluss->PostgreSQL sinkÊï∞ÊçÆÊµÅ' as data_flow,
    'SinkËÆæÂ§áÁä∂ÊÄÅÊ±áÊÄª' as layer,
    COUNT(*) as record_count
FROM postgres_device_status_summary
WHERE update_time >= CURRENT_TIMESTAMP - INTERVAL '1' HOUR
UNION ALL
SELECT 
    'Fluss->PostgreSQL sinkÊï∞ÊçÆÊµÅ' as data_flow,
    'SinkÁîµÁΩëÁõëÊéßÊåáÊ†á' as layer,
    COUNT(*) as record_count
FROM postgres_grid_monitoring_metrics
WHERE update_time >= CURRENT_TIMESTAMP - INTERVAL '1' HOUR;

-- ===============================================
-- ÊÄßËÉΩÁõëÊéßÊü•ËØ¢
-- ===============================================

-- Âª∂ËøüÁõëÊéß - Ê£ÄÊü•Á´ØÂà∞Á´ØÊï∞ÊçÆÂª∂Ëøü
SELECT 
    'CDCÊï∞ÊçÆÂª∂ËøüÁõëÊéß' as monitor_type,
    AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - update_time))) as avg_delay_seconds,
    MAX(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - update_time))) as max_delay_seconds,
    MIN(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - update_time))) as min_delay_seconds
FROM postgres_device_status_summary
WHERE update_time >= CURRENT_TIMESTAMP - INTERVAL '5' MINUTE;

-- ÂêûÂêêÈáèÁõëÊéß - Ê£ÄÊü•ÊØèÂàÜÈíüÂ§ÑÁêÜÁöÑËÆ∞ÂΩïÊï∞
SELECT 
    'CDCÊï∞ÊçÆÂêûÂêêÈáèÁõëÊéß' as monitor_type,
    DATE_TRUNC('minute', update_time) as time_minute,
    COUNT(*) as records_per_minute
FROM postgres_device_status_summary
WHERE update_time >= CURRENT_TIMESTAMP - INTERVAL '10' MINUTE
GROUP BY DATE_TRUNC('minute', update_time)
ORDER BY time_minute DESC;

-- Êï∞ÊçÆÂÆåÊï¥ÊÄßÁõëÊéß - Ê£ÄÊü•ÂêÑÂ±ÇÊï∞ÊçÆ‰∏ÄËá¥ÊÄß
SELECT 
    'Êï∞ÊçÆÂÆåÊï¥ÊÄßÁõëÊéß' as monitor_type,
    (SELECT COUNT(*) FROM fluss_catalog.fluss.ods_power_dispatch_raw WHERE event_time >= CURRENT_TIMESTAMP - INTERVAL '5' MINUTE) as ods_dispatch_count,
    (SELECT COUNT(*) FROM fluss_catalog.fluss.ods_device_dimension_raw WHERE event_time >= CURRENT_TIMESTAMP - INTERVAL '5' MINUTE) as ods_device_count,
    (SELECT COUNT(*) FROM fluss_catalog.fluss.dwd_smart_grid_detail WHERE dispatch_time >= CURRENT_TIMESTAMP - INTERVAL '5' MINUTE) as dwd_detail_count,
    (SELECT COUNT(*) FROM postgres_device_status_summary WHERE update_time >= CURRENT_TIMESTAMP - INTERVAL '5' MINUTE) as sink_summary_count; 